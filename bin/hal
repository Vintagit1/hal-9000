#!/usr/bin/env python
from __future__ import print_function

from contextlib import contextmanager
import argparse
import json
import os
import re
import subprocess
import sys


class Setting(object):
    PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    DOTFILES_ROOT = os.path.join(PROJECT_ROOT, 'dotfiles/')
    WORKSPACE_ROOT = os.path.abspath(os.path.join(os.path.expanduser('~'), 'Projects'))


class Color(object):
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


class Dotfiles(object):
    DEFAULT_CONFIG = os.path.join(Setting.DOTFILES_ROOT, 'hal_dotfiles.json')
    TEMPLATE_CONFIG = os.path.join(Setting.DOTFILES_ROOT, 'hal_dotfiles.template.json')

    def __init__(self, path=None):
        self.path = path or self.DEFAULT_CONFIG
        self._data = None

    @property
    def data(self):
        if not self._data:
            with open(self.path) as f:
                try:
                    self._data = json.load(f)
                except ValueError:
                    with open(self.TEMPLATE_CONFIG) as f:
                        self._data = json.load(f)

        return self._data

    def find_by_key(self, key, value, field_name):
        some_list = self.data[field_name]

        try:
            some_dict = next(some_dict for some_dict in some_list if some_dict[key] == value)
        except StopIteration:
            some_dict = None

        return some_dict

    def show(self):
        print(json.dumps(self.data, sort_keys=True, indent=4, separators=(',', ': ')))

    def save(self):
        with open(self.path, 'w') as f:
            json.dump(self.data, f, sort_keys=True, indent=4, separators=(',', ': '))


class HAL9000Formatter(argparse.HelpFormatter):

    def __init__(self, prog):
        super(HAL9000Formatter, self).__init__(prog, max_help_position=30)


class HAL9000(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            prog='hal',
            description='I am completely operational, and all my circuits are functioning perfectly',
            formatter_class=HAL9000Formatter
        )
        self.parser = parser

        self.parser.add_argument('-v', '--version', action='version', version='9000')

        subparsers = parser.add_subparsers(
            title='sub commands'
        )

        update_parser = subparsers.add_parser('update', help='pull the repo and run ansible-playbook')
        update_parser.set_defaults(func=self.update)

        self.dotfiles = Dotfiles()

        link_parser = subparsers.add_parser('link', help='add the file to the dotfiles repository')
        link_parser.set_defaults(func=self.link)
        link_parser.add_argument('filename', type=str)

        unlink_parser = subparsers.add_parser('unlink', help='remove the file from the dotfiles repository')
        unlink_parser.set_defaults(func=self.unlink)
        unlink_parser.add_argument('filename', type=str)

        sync_parser = subparsers.add_parser('sync', help='force sync dotfiles')
        sync_parser.set_defaults(func=self.sync)

        clone_parser = subparsers.add_parser('clone', help='git clone my repositories')
        clone_parser.set_defaults(func=self.clone)
        clone_parser.add_argument('repo_scope', type=str)

        pod_bay_doors_parser = subparsers.add_parser('open-the-pod-bay-doors', help='open the pod bay doors, please, HAL')
        pod_bay_doors_parser.set_defaults(func=self.open_the_pod_bay_doors)

    def _hal_says(self, text, color=Color.ENDC):
        print('HAL: {0}{1}{2}'.format(color, text, Color.ENDC))

    def _run(self, command, shell=True, verbose=True):
        if verbose:
            self._hal_says(command, color=Color.OKBLUE)

        returncode = subprocess.call(command, shell=shell)

        return returncode

    def _run_with_output(self, command, shell=True, verbose=True, print_output=True):
        if verbose:
            self._hal_says(command, color=Color.OKBLUE)

        try:
            output = subprocess.check_output(command, stderr=subprocess.STDOUT, shell=shell)
            returncode = 0
        except subprocess.CalledProcessError as exc:
            output = exc.output
            returncode = exc.returncode
        finally:
            if print_output and output:
                print(output, end='')

        return returncode, output

    def update(self, namespace, extra_args=None):
        os.chdir(Setting.PROJECT_ROOT)
        self._run('git fetch')
        self._run('git pull')

        self._run('brew upgrade ansible')

        os.chdir(os.path.join(Setting.PROJECT_ROOT, 'playbooks'))
        command = 'ansible-playbook site.yml -v'
        if extra_args:
            command = ' '.join([command, ] + extra_args)
        returncode = self._run(command)
        if returncode == 0:
            self._hal_says('Now open a new shell to active your dev environment', color=Color.HEADER)

    def link(self, namespace, extra_args=None):
        filepath = os.path.abspath(os.path.join(os.getcwd(), namespace.filename))
        filename = os.path.basename(filepath)

        if self._run('mv {0} {1}'.format(filepath, Setting.DOTFILES_ROOT)) == 0:
            ln_src = os.path.join(Setting.DOTFILES_ROOT, filename)
            ln_dest = filepath
            self._run('ln -sf {0} {1}'.format(ln_src, ln_dest))

            ln_dict = self.dotfiles.find_by_key('src', filename, 'links')
            if ln_dict:
                ln_dict['dest'] = filepath
            else:
                self.dotfiles.data['links'].append(
                    {'dest': filepath, 'src': filename},
                )

            self.dotfiles.save()
            self.dotfiles.show()

    def unlink(self, namespace, extra_args=None):
        filepath = os.path.abspath(os.path.join(os.getcwd(), namespace.filename))

        if os.path.islink(filepath):
            real_filepath = os.path.realpath(filepath)
            self._run('unlink {0}'.format(filepath))
            self._run('mv {0} {1}'.format(real_filepath, os.path.dirname(filepath)))

            ln_dict = self.dotfiles.find_by_key('dest', filepath, 'links')
            if ln_dict:
                self.dotfiles.data['links'].remove(ln_dict)

            self.dotfiles.save()
            self.dotfiles.show()
        else:
            self._hal_says('{0} is not a link file'.format(filepath), color=Color.FAIL)
            sys.exit(1)

    def sync(self, namespace, extra_args=None):
        for link in self.dotfiles.data['links']:
            self._run('ln -sfn {0} {1}'.format(os.path.join(Setting.DOTFILES_ROOT, link['src']), link['dest']))

    def clone(self, namespace, extra_args=None):
        from concurrent.futures import ThreadPoolExecutor

        scopes = {
            'personal': [
                {'git_url': 'https://github.com/CodeTengu/HyakkiYagyo.git'},
                {'git_url': 'https://github.com/CodeTengu/JokeKappa.git'},
                {'git_url': 'https://github.com/CodeTengu/LambdaBaku.git'},
                {'git_url': 'https://github.com/vinta/albedo.git'},
                {'git_url': 'https://github.com/vinta/awesome-python.git'},
                {'git_url': 'https://github.com/vinta/dockerfiles.git'},
                {'git_url': 'https://github.com/vinta/pangu.git', 'location': os.path.join(Setting.WORKSPACE_ROOT, 'oh-my-go/src/github.com/vinta/pangu')},
                {'git_url': 'https://github.com/vinta/pangu.java.git'},
                {'git_url': 'https://github.com/vinta/pangu.js.git'},
                {'git_url': 'https://github.com/vinta/pangu.py.git'},
                {'git_url': 'https://github.com/vinta/pangu.space.git', 'location': os.path.join(Setting.WORKSPACE_ROOT, 'oh-my-go/src/github.com/vinta/pangu.space')},
                {'git_url': 'https://github.com/vinta/simple-project-on-k8s.git'},
            ],
            'work': [
                {'git_url': 'https://github.com/swaglive/october.git'},
                {'git_url': 'https://github.com/swaglive/october.rocks.git'},
                {'git_url': 'https://github.com/swaglive/skyeye-backend.git'},
                {'git_url': 'https://github.com/swaglive/swag-bot.git'},
                {'git_url': 'https://github.com/swaglive/swag-cashout.git'},
                {'git_url': 'https://github.com/swaglive/swag-feature-search.git'},
                {'git_url': 'https://github.com/swaglive/swag-frontend.git'},
                {'git_url': 'https://github.com/swaglive/swag-server.git'},
                {'git_url': 'https://github.com/swaglive/swag-stats.git'},
                {'git_url': 'https://github.com/swaglive/swag.backend.connector.google-cloud-storage.git'},
                {'git_url': 'https://github.com/swaglive/swag.backend.connector.message-asset-generator.git'},
                {'git_url': 'https://github.com/swaglive/swag.backend.connector.post-asset-generator.git'},
                {'git_url': 'https://github.com/swaglive/swag.connector.google-cloud-storage-sync.git'},
                {'git_url': 'https://github.com/swaglive/swag.live.git'},
                {'git_url': 'https://github.com/swaglive/wallet-bot.git'},
                {'git_url': 'https://github.com/swaglive/wallet.17.media.git'},
                {'git_url': 'https://github.com/swaglive/wallet.git'},
            ],
        }

        try:
            repo_list = scopes[namespace.repo_scope]
        except KeyError:
            if namespace.repo_scope == 'all':
                repo_list = []
                for scope in scopes.keys():
                    for repo_data in scopes[scope]:
                        repo_list.append(repo_data)
            else:
                self._hal_says('available scopes: {0}'.format(', '.join(['all', ] + list(scopes.keys()))), color=Color.FAIL)
                sys.exit(1)

        github_re = r'https://github.com/([\w\.\-_]+)/([\w\.\-_]+).git'

        def git_clone(repo_data):
            repo_git_url = repo_data['git_url']
            repo_name = re.match(github_re, repo_data['git_url']).group(2)
            repo_location = repo_data.get('location', os.path.join(Setting.WORKSPACE_ROOT, repo_name))
            _, output = self._run_with_output('git clone {0} {1}'.format(repo_git_url, repo_location), print_output=False)
            if b'already exists and is not an empty directory' in output:
                self._run('cd {0} && git pull'.format(repo_location))
            return True

        with ThreadPoolExecutor(max_workers=None) as executor:
            for _ in executor.map(git_clone, repo_list):
                pass

    def open_the_pod_bay_doors(self, namespace, extra_args=None):
        self._hal_says("I'm sorry Dave, I'm afraid I can't do that", color=Color.FAIL)

        filepath = os.path.join(Setting.PROJECT_ROOT, 'assets/Im_sorry_Dave_Im_afraid_I_cant_do_that.mp3')
        self._run('afplay {0}'.format(filepath), verbose=False)

    def read_lips(self):
        if len(sys.argv) == 1:
            self.parser.print_help()
            sys.exit(0)

        # https://docs.python.org/2/library/argparse.html#partial-parsing
        namespace, extra_args = self.parser.parse_known_args()
        namespace.func(namespace, extra_args)


if __name__ == '__main__':
    hal_9000 = HAL9000()
    hal_9000.read_lips()
